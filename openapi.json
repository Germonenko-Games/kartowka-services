{
  "openapi": "3.0.1",
  "info": {
    "title": "Kartówka API",
    "description": "The Kartówka REST-like API.",
    "version": "0.1.0"
  },
  "paths": {
    "/api/assets/{assetId}": {
      "patch": {
        "tags": [
          "Assets"
        ],
        "summary": "Update asset",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssetDetailsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssetDetailsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssetDetailsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated asset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Assets"
        ],
        "summary": "Remove asset",
        "description": "This endpoint is idempotent.",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful no content result."
          }
        }
      }
    },
    "/api/authorization": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Authorize a user by login and password",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCredentials"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCredentials"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserCredentials"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Access token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/packs/{packId}": {
      "get": {
        "tags": [
          "Packs"
        ],
        "summary": "Get pack by ID",
        "parameters": [
          {
            "name": "packId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "properties",
            "in": "query",
            "description": "Specifies what related entities should be pulled as well.",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PackProperties"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pack object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pack"
                }
              }
            }
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Packs"
        ],
        "summary": "Update a pack",
        "parameters": [
          {
            "name": "packId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePackDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePackDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePackDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated pack",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pack"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pack"
                }
              }
            }
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pack"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Packs"
        ],
        "summary": "Remove a pack",
        "description": "This endpoint is idempotent.",
        "parameters": [
          {
            "name": "packId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content success result"
          }
        }
      }
    },
    "/api/packs": {
      "post": {
        "tags": [
          "Packs"
        ],
        "summary": "Create a new pack",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePackDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePackDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePackDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pack object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pack"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/packs/{packId}/assets/{fileName}": {
      "post": {
        "tags": [
          "Packs"
        ],
        "summary": "Upload a new asset",
        "parameters": [
          {
            "name": "packId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fileName",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Uploaded asset descriptor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Pack not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/questions": {
      "post": {
        "tags": [
          "Questions"
        ],
        "summary": "Creates a new question",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQuestionDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQuestionDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQuestionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New question object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              }
            }
          },
          "400": {
            "description": "Question validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              }
            }
          }
        }
      }
    },
    "/api/questions/{questionId}": {
      "get": {
        "tags": [
          "Questions"
        ],
        "summary": "Get question by ID",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Question model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              }
            }
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Questions"
        ],
        "summary": "Update a question",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQuestionDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQuestionDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQuestionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated question object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              }
            }
          },
          "400": {
            "description": "Question validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Question not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Questions"
        ],
        "summary": "Removes a question",
        "description": "This endpoint is idempotent.",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/questions-categories": {
      "post": {
        "tags": [
          "QuestionsCategories"
        ],
        "summary": "Create a new question",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQuestionsCategoryDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQuestionsCategoryDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQuestionsCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New questions category object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionsCategory"
                }
              }
            }
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/questions-categories/{categoryId}": {
      "patch": {
        "tags": [
          "QuestionsCategories"
        ],
        "summary": "Create a new questions category",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQuestionsCategoryDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQuestionsCategoryDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQuestionsCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated questions category object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionsCategory"
                }
              }
            }
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "QuestionsCategories"
        ],
        "summary": "Remove a category",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content success response."
          }
        }
      }
    },
    "/api/registration": {
      "post": {
        "tags": [
          "Registration"
        ],
        "summary": "Register a new user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserData"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserData"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserData"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success response"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rounds": {
      "post": {
        "tags": [
          "Rounds"
        ],
        "summary": "Create a new round",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoundDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoundDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoundDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New round object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Round"
                }
              }
            }
          },
          "400": {
            "description": "Round validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Round"
                }
              }
            }
          }
        }
      }
    },
    "/api/rounds/{roundId}": {
      "patch": {
        "tags": [
          "Rounds"
        ],
        "summary": "Update a round",
        "parameters": [
          {
            "name": "roundId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoundDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoundDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoundDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated round object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Round"
                }
              }
            }
          },
          "400": {
            "description": "Round validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Round not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Rounds"
        ],
        "summary": "Remove a round",
        "description": "This endpoint is idempotent.",
        "parameters": [
          {
            "name": "roundIdId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "roundId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Asset": {
        "required": [
          "blobUrl",
          "displayName",
          "systemName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "displayName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "systemName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "size": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int64"
          },
          "assetType": {
            "$ref": "#/components/schemas/AssetType"
          },
          "blobUrl": {
            "maxLength": 400,
            "minLength": 0,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AssetType": {
        "enum": [
          "image",
          "music"
        ],
        "type": "string"
      },
      "CreatePackDto": {
        "required": [
          "description",
          "name"
        ],
        "type": "object",
        "properties": {
          "authorId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateQuestionDto": {
        "required": [
          "answer"
        ],
        "type": "object",
        "properties": {
          "packId": {
            "type": "integer",
            "format": "int64"
          },
          "questionsCategoryId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "questionText": {
            "maxLength": 400,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "assetId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "score": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "answer": {
            "maxLength": 400,
            "minLength": 0,
            "type": "string"
          },
          "contentType": {
            "$ref": "#/components/schemas/QuestionContentType"
          },
          "questionType": {
            "$ref": "#/components/schemas/QuestionType"
          }
        },
        "additionalProperties": false
      },
      "CreateQuestionsCategoryDto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "packId": {
            "type": "integer",
            "format": "int64"
          },
          "roundId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "order": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateRoundDto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "packId": {
            "type": "integer",
            "format": "int64"
          },
          "order": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationResult"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Pack": {
        "required": [
          "description",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "authorId": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/PackStatus"
          },
          "name": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "updatedDate": {
            "type": "string",
            "format": "date-time"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Asset"
            },
            "nullable": true
          },
          "questionsCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuestionsCategory"
            },
            "nullable": true
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Question"
            },
            "nullable": true
          },
          "rounds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Round"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PackProperties": {
        "enum": [
          "assets",
          "categories",
          "questions",
          "rounds"
        ],
        "type": "string"
      },
      "PackStatus": {
        "enum": [
          "draft",
          "active",
          "inactive"
        ],
        "type": "string"
      },
      "Question": {
        "required": [
          "answer"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "questionsCategoryId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "questionText": {
            "maxLength": 400,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "score": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "answer": {
            "maxLength": 400,
            "minLength": 0,
            "type": "string"
          },
          "contentType": {
            "$ref": "#/components/schemas/QuestionContentType"
          },
          "questionType": {
            "$ref": "#/components/schemas/QuestionType"
          },
          "asset": {
            "$ref": "#/components/schemas/Asset"
          }
        },
        "additionalProperties": false
      },
      "QuestionContentType": {
        "enum": [
          "text",
          "image",
          "music"
        ],
        "type": "string"
      },
      "QuestionType": {
        "enum": [
          "default",
          "pass",
          "auction",
          "sponsored"
        ],
        "type": "string"
      },
      "QuestionsCategory": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "roundId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "order": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Round": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "order": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TokenInfo": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "nullable": true
          },
          "issueDate": {
            "type": "string",
            "format": "date-time"
          },
          "expireDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "UpdateAssetDetailsDto": {
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePackDto": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateQuestionDto": {
        "type": "object",
        "properties": {
          "questionsCategoryId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "questionText": {
            "maxLength": 400,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "assetId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "score": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "answer": {
            "maxLength": 400,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "contentType": {
            "$ref": "#/components/schemas/QuestionContentType"
          },
          "questionType": {
            "$ref": "#/components/schemas/QuestionType"
          }
        },
        "additionalProperties": false
      },
      "UpdateQuestionsCategoryDto": {
        "type": "object",
        "properties": {
          "roundId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateRoundDto": {
        "type": "object",
        "properties": {
          "order": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserCredentials": {
        "required": [
          "emailAddress",
          "password"
        ],
        "type": "object",
        "properties": {
          "emailAddress": {
            "minLength": 1,
            "type": "string"
          },
          "password": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UserData": {
        "required": [
          "emailAddress",
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "emailAddress": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string"
          },
          "username": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "password": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ValidationResult": {
        "type": "object",
        "properties": {
          "memberNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "Put JWT token here",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}